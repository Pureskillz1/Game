using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMovement : MonoBehavior
{
  [Header("Movement")]
  private float moveSpeed;
  public float walkSpeed;
  public float sprintSpeed;
  
  public float groundDrag;
  
  [Header("Jumping")]
  public float jumpforce;
  public float jumpCooldown;
  public float airMultiplier;
  bool readyToJump;
  
  [Header("Crouching")]
  public float crouchSpeed;
  public float crouchYScale;
  Private float startYScale;
  
  
  [Header("keybinds")]
  public KeyCode jumpKey = KeyCode.Space;
  public keyCode sprintKey = KeyCode.LeftShift;
  public KeyCode crouchKey = KeyCode.LeftControl;
  
  [Header("Ground Check")]
  public float playerHeight;
  public LayerMask whatIsGround;
  bool Grounded;
  
  public Transform orientation;
  
  float horizontalInput;
  float verticalInput;
  
  Vector3 moveDirection;
  
  Rigidbody rb;
  
  public MovementState state;
  
  public enum MovementState
  {
    walking,
    sprinting,
    crouching,
    air
  }
  
  private void Start()
  {
    rb = GetComponent<Rigidbody>();
    rb.frezzeRotation = true;
    readyToJump = true;
    
    startYScale = transform.localScale.y;
    
  }
  
  private void update()
  {
    //ground check 
    grounded = Physics.Raycast(transform.position, Vector3.down,playerheight * 0.5f + 0.2f,whatIsGround);
    
    MyInput();
    SpeedControl();
    StateHandler();
    
    //handle drag
    if (grounded)
      rb.drag = groundDrag;
    else
      rb.drag = 0;
  }
  
  private void FixedUpdate()
  {
    MovePlayer();
  }
  
  private void MyInput()
  {
    horizontalInput = Input.GetAxisRaw("Horizontal");
    verticalInput = Input.GetAxisRaw("Vertical");
    
    //when to jump 
    if(input.GetKey(jumpkey) && readyToJump && grounded)
    {
      readyToJump = false;
      
      Jump();
      
      Invoke(nameof(ResetJump), jumpCooldown);
    }
    
    //start crouching 
    if(Input.GetKeyDown(crouchKey))
    {
      transform.localScale = new Vector3(transform.local.x, crouchYScale, transform.localScale.z);
      rb.AddForce(Vector3.down * 5f, ForceMode.Impulse);
    }
    
    //stop crouch 
    if (Input.GetKetUp(crouchKey))
    {
      transform.localScale = new Vector3(transform.local.x, startYScale, transform.localScale.z);
    }
  }
  
  private void StateHandler()
  {
    //Mode - Crouching
    if (Input.GetKey(crouchKey))
    {
      state = MovementState.crouching;
      moveSpeed = crouchSpeed;
    }
    
    // Mode - Springting
    if(grounded && Input>GetKey(sprintKey))
    {
      state = MovementState.sprinting;
      moveSpeed = sprintSpeed;
    }
    
    //mode - walking
    else if (grounded)
    {
      state = MovementState.walking;
      moveSpeed = walkSpeed;
    }
    
    //mode Air
    else
    {
      state = MovementState.air;
    }
  }
  
  privatevoid MovePlayer()
  {
    // Calucate Movement direction
    moveDirection = orientation.forward * verticalInput + orientation.right * horizontalInput;
    
    // on ground 
    if(grounded)
      rb.AddForce(moveDirection.normalized * moveSpeed * 10f, ForceMode.Force);
      
      // in air 
      else if(!grounded)
        rb.AddForce(moveDirection.normalized * moveSpeed * 10f * airMultiplier, ForceMode.Force);
  }
  
  
  private void SpeedControl()
  {
    Vector3 flatVel = new Vector3(rb.velocity.x, 0f, rb.velocity.z);
    
    //limit velocity if needed 
    if(flatVel.magnitude > moveSpeed)
    {
      Vector3 limitedVel = flatvel.normalized * moveSpeed;
      rb.velocity = new Vector3(limitedVel.x, rb.velocity.y, limitedVel.z);
    }
  }
  
  
  private void Jump()
  {
    //reset y Velocity 
    rb.velocity = new Vector3(rb.velocity.x, 0f, rb.velocity.z);
    rb.AddForce(transform.up * jumpForce, ForceMode.Impulse);
  }
  private void ResetJump()
  {
    readyToJump = true;
}
