using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMovement : MonoBehavior
{
  [Header("Movement")]
  public float moveSpeed;
  
  public float groundDrag;
  
  public float jumpforce;
  public float jumpCooldown;
  public float airMultiplier;
  bool readyToJump;
  
  [Header("keybinds")]
  public KeyCode jumpKey = KeyCode.Space;
  
  [Header("Ground Check")]
  public float playerHeight;
  public LayerMask whatIsGround;
  bool Grounded;
  
  public Transform orientation;
  
  float horizontalInput;
  float verticalInput;
  
  Vector3 moveDirection;
  
  Rigidbody rb;
  
  private void Start()
  {
    rb = GetComponent<Rigidbody>();
    rb.frezzeRotation = true;
  }
  
  private void update()
  {
    //ground check 
    grounded = Physics.Raycast(transform.position, Vector3.down,playerheight * 0.5f + 0.2f,whatIsGround);
    
    MyInput();
    SpeedControl();
    
    //handle drag
    if (grounded)
      rb.drag = groundDrag;
    else
      rb.drag = 0;
  }
  
  private void FixedUpdate()
  {
    MovePlayer();
  }
  
  private void MyInput()
  {
    horizontalInput = Input.GetAxisRaw("Horizontal");
    verticalInput = Input.GetAxisRaw("Vertical");
    
    //when to jump 
    if(input.GetKey(jumpkey) && readyToJump && grounded)
    {
      readyToJump = false;
      
      Jump();
      
      Invoke(nameof(ResetJump), jumpCooldown);
    }
  }
  
  privatevoid MovePlayer()
  {
    // Calucate Movement direction
    moveDirection = orientation.forward * verticalInput + orientation.right * horizontalInput;
    
    // on ground 
    if(grounded)
      rb.AddForce(moveDirection.normalized * moveSpeed * 10f, ForceMode.Force);
      
      // in air 
      else if(!grounded)
        rb.AddForce(moveDirection.normalized * moveSpeed * 10f * airMultiplier, ForceMode.Force);
  }
  
  
  private void SpeedControl()
  {
    Vector3 flatVel = new Vector3(rb.velocity.x, 0f, rb.velocity.z);
    
    //limit velocity if needed 
    if(flatVel.magnitude > moveSpeed)
    {
      Vector3 limitedVel = flatvel.normalized * moveSpeed;
      rb.velocity = new Vector3(limitedVel.x, rb.velocity.y, limitedVel.z);
    }
  }
  
  
  private void Jump()
  {
    //reset y Velocity 
    rb.velocity = new Vector3(rb.velocity.x, 0f, rb.velocity.z);
    rb.AddForce(transform.up * jumpForce, ForceMode.Impulse);
  }
  private void ResetJump()
  {
    readyToJump = true;
}
